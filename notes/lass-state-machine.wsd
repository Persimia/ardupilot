@startuml Lass State Machine


state ModeLoiterAssisted {

' States
state "init()" as init: \
sets default state based on whether we are attached or not

' Transitions
[*] --> init : set_mode()
init --> [*] : else
init --> init : if (AltHoldModeState::Flying || attached)

' ==========================
--

state "run()" as run{

' States
state Lass: \
Pilot velocity control relative to dock. \n\
heading locked

State AttachManeuver {
State LeadUp: \
use pos control to hit pos vel target \n\
keep yaw pointed at obstacle

State CoastIn: \
pitch set based on lead up \n\
roll, pitch, yaw rates to zero

State WindDown: \
relax the controllers to smoothly settle
}


state AttachedVegetable: \
disable crash checks \n\
disable mode changes 

State DetachManeuver {
State WindUp: \
pitch set based on reverse of lead up

State CoastOut: \
send detach signal to mcu \n\
roll, pitch, yaw rates held constant

State Recover: \
use pos control to get to safe distance
}

State Default: \
go to normal loiter code when nothing detected

State Abort: \
abort state to escape blade


' Transitions
[*] --> Lass : dock
[*] --> Default : no_dock
Lass --> Default : no_dock
Default --> Lass : dock_found
[*] --> AttachedVegetable : attached
Lass --> LeadUp : engageDocking()
LeadUp --> Lass : variance too high
LeadUp --> CoastIn : at_coast_dist
CoastIn --> Abort : timeout
CoastIn --> WindDown : attached
WindDown --> AttachedVegetable : settled
AttachedVegetable --> WindUp : detach_engage
WindUp --> CoastOut : at_attitude
CoastOut --> Recover : at_coast_dist
Recover --> Lass : at_safe_dist


}

[*] --> run : update_flight_mode()
run --> [*] : !AltHoldModeState::Flying || lass_disengage
}



@enduml

' https://plantuml.com/state-diagram
