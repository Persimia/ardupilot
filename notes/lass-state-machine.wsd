@startuml Lass State Machine


state ModeLoiterAssisted {

' States
state "init()" as init: \
sets default state based on whether we are attached or not

' Transitions
[*] --> init : set_mode()
init --> [*] : else
init --> init : if (AltHoldModeState::Flying || attached)

' ==========================
--

state "run()" as run{

' States
state Lass: \
Pilot velocity control relative to dock. \n\
heading locked

State AttachManeuver {
State LeadUp: \
use pos control to hit pos vel target \n\
keep yaw pointed at obstacle

State CoastIn: \
pitch set based on lead up \n\
roll, pitch, yaw rates to zero

State WindDown: \
relax the controllers to smoothly settle
}


state Vegetable: \
disable crash checks \n\
disable mode changes 

State DetachManeuver {
State WindUp: \
pitch set based on reverse of lead up

State CoastOut: \
send detach signal to mcu \n\
roll, pitch, yaw rates held constant

State Recover: \
use pos control to get to safe distance
}

State Default: \
go to normal loiter code when nothing detected

State Abort: \
abort state to escape blade


' Transitions
[*] --> Default
Default --> Lass : DOCK_FOUND
Default --> WindDown : ATTACHED
Lass --> Default : !DOCK_FOUND
Lass --> LeadUp : DOCKING_ENGAGED
Lass --> WindDown : ATTACHED
LeadUp --> CoastIn : WITHIN_COAST_IN_DIST
LeadUp --> WindDown : ATTACHED
LeadUp --> Lass : !ATTACH_BUTTON_PRESSED
CoastIn --> WindDown : ATTACHED
' CoastIn --> Abort : FALLING
WindDown --> Vegetable : WINDED_DOWN
' WindDown --> Abort : FALLING
Vegetable --> WindUp : !ATTACH_BUTTON_PRESSED
WindUp --> CoastOut : STABLE_AT_WIND_UP_PITCH
CoastOut --> Recover : BEYOND_COAST_OUT_DIST
Recover --> Lass : AT_RECOVERY_POSITION
}

[*] --> run : update_flight_mode()
run --> [*] : !AltHoldModeState::Flying || lass_disengage
}



@enduml

' https://plantuml.com/state-diagram
